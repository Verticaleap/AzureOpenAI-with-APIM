<policies>
    <inbound>
        <base />
        <set-variable name="originalText" value="@{
                return (string)context.Request.Body.As<JObject>()["text"];
        }" />
        <!-- Step 1: Send input to the Content Safety API -->
        <set-backend-service backend-id="content-safety-primary-backend" />
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="override">
            <value>{{content-safety-api-key}}</value>
        </set-header>
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <base />
        <set-variable name="responseBody" value="@(context.Response.Body.As<string>())" />
        <choose>
            <when condition="@{
                    var responseContent = context.Variables["responseBody"] as string;
                    var responseJson = JObject.Parse(responseContent);
                    return responseJson["categoriesAnalysis"].All(cat => (int)cat["severity"] == 0);
            }">
                <!-- Content is safe, set backend to OpenAI API -->
                <set-backend-service backend-id="aoai-primary-backend" />
                <authentication-managed-identity resource="https://cognitiveservices.azure.com" />
            </when>
            <otherwise>
                <!-- Content is not safe, return error -->
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "Content violates safety policies.")
                        ).ToString();
                    }</set-body>
                </return-response>
            </otherwise>
        </choose>
        <set-body>@{
            var originalText = context.Variables["originalText"] as string;
            var messages = new JArray(
                new JObject(
                    new JProperty("role", "system"),
                    new JProperty("content", "You are an AI assistant that helps people find information.")
                ),
                new JObject(
                    new JProperty("role", "user"),
                    new JProperty("content", originalText)
                )
            );
            return new JObject(
                new JProperty("messages", messages),
                new JProperty("temperature", 0.7),
                new JProperty("top_p", 0.95),
                new JProperty("max_tokens", 800)
            ).ToString();
        }</set-body>
    </outbound>
    <on-error>
        <base />
        <set-variable name="errorDetail" value="@{return context.LastError.Message;}" />
        <!-- Add error logging or additional error handling here -->
    </on-error>
</policies>